<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+Github 建站整理（二）：多终端同步和图床</title>
    <url>/2022/01/19/20220119Hexo+GithubP2/</url>
    <content><![CDATA[<blockquote><p>本文内容并非原创，部分内容来源于官方文档和网络，可以理解为建站之后的个人总结和整理，便于自己以后查阅。</p>
</blockquote>

<p><img src="https://cdn.jsdelivr.net/gh/wwyyff123/CDN/Photos/blogs/hexo&github2.png" alt="起始页面"></p>
<h1 id="多终端同步"><a href="#多终端同步" class="headerlink" title="多终端同步"></a>多终端同步</h1><div class="note default"><p>多终端同步工作有很多解决办法，比较简单的直接使用onedrive，百度网盘直接同步，这里使用github的分支来进行多终端同步。</p>
</div>

<p>用hexo d命令上传到github的文件并不是源文件，而是编译后生成的网页文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/wwyyff123/CDN/Photos/blogs/11github%E4%BB%93%E5%BA%93.jpg"></p>
<p>可以发现这里上传的文件和本地目录下的.deploy_git文件夹里的内容是一致的  </p>
<p><img src="https://cdn.jsdelivr.net/gh/wwyyff123/CDN/Photos/blogs/12%E6%9C%AC%E5%9C%B0%E7%9B%AE%E5%BD%95.jpg"></p>
<p>而其他的源文件并没有上传到github，接下来利用github的分支管理，将源文件上传。</p>
<h2 id="建立分支"><a href="#建立分支" class="headerlink" title="建立分支"></a>建立分支</h2><p>在github下博客的仓库里新建一个分支，命名为hexo</p>
<p><img src="https://cdn.jsdelivr.net/gh/wwyyff123/CDN/Photos/blogs/13%E6%96%B0%E5%BB%BA%E5%88%86%E6%94%AF.jpg" alt="新建分支"></p>
<p>在仓库的settings中，修改默认分支为hexo</p>
<p><img src="https://cdn.jsdelivr.net/gh/wwyyff123/CDN/Photos/blogs/14%E4%BF%AE%E6%94%B9%E8%AE%BE%E7%BD%AE.jpg" alt="修改设置"></p>
<p>然后在本地的任意目录下，打开终端，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:用户名/用户名.github.io.git</span><br></pre></td></tr></table></figure>

<p>随后hexo分支被clone到了本地目录，打开克隆到本地的文件夹，将里面除了.git文件夹外的所有文件全部删除<br>然后在之前博客的源文件里，除了.deploy_git文件夹，其余文件全部复制到刚才clone的文件夹里，以后这个clone的文件夹变成了博客的新文件夹。需要注意的是复制过来的源文件应该有一个.gitignore文件，作用是忽略一些不必要的文件，如果没有，需要自己新建一个并且在里面写上  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure>
<p>在博客新目录下终端运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;添加分支&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>这样源文件就上传到了hexo分支下，检查一下有没有上传成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/wwyyff123/CDN/Photos/blogs/15hexo%E5%88%86%E6%94%AFjpg.jpg" alt="检查分支"></p>
<p>到这里分支内容处理结束  </p>
<h2 id="其他电脑操作"><a href="#其他电脑操作" class="headerlink" title="其他电脑操作"></a>其他电脑操作</h2><p>在其他电脑上首先需要搭建环境（参考第一篇文章）</p>
<div class="note default"><ol>
<li>安装git，并设置好git全局邮箱和用户名，以及ssh key</li>
<li>安装node.js</li>
<li>安装hexo</li>
</ol>
</div>
<p>之后在任意目录下，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:用户名/用户名.github.io.git</span><br></pre></td></tr></table></figure>
<p>将hexo分支下的源文件clone到本地，然后进入到源文件目录内运行终端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>到这里生成部署就完成了，以后要写新日志直接在该目录下运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;文章名&quot;</span><br></pre></td></tr></table></figure>

<h1 id="Github-jsDelivr建立CDN个人图床"><a href="#Github-jsDelivr建立CDN个人图床" class="headerlink" title="Github+jsDelivr建立CDN个人图床"></a>Github+jsDelivr建立CDN个人图床</h1><blockquote><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。</p>
</blockquote>
<p>以上总结，加快图片加载速度。</p>
<h2 id="新建Github仓库"><a href="#新建Github仓库" class="headerlink" title="新建Github仓库"></a>新建Github仓库</h2><p>首先新建一个仓库专门用于保存图片</p>
<p><img src="https://cdn.jsdelivr.net/gh/wwyyff123/CDN/Photos/blogs/16%E5%BB%BA%E7%AB%8B%E5%9B%BE%E5%BA%8A%E4%BB%93%E5%BA%93.jpg" alt="建立仓库"></p>
<p>然后在本地任意目录（这里我和blog文件夹放在一起），终端运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:用户名/images.git</span><br></pre></td></tr></table></figure>

<h2 id="上传资源"><a href="#上传资源" class="headerlink" title="上传资源"></a>上传资源</h2><p>需要外链的图片资源（jsDelivr最大支持20M），复制到该目录下，然后终端运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;上传图片&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>将图片资源上传到github</p>
<h2 id="发布仓库"><a href="#发布仓库" class="headerlink" title="发布仓库"></a>发布仓库</h2><p>点击Create a new release，发布</p>
<p><img src="https://cdn.jsdelivr.net/gh/wwyyff123/CDN/Photos/blogs/17%E5%8F%91%E5%B8%83release.jpg" alt="发布"></p>
<p>自定义版本号描述信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/wwyyff123/CDN/Photos/blogs/18%E5%8F%91%E5%B8%83.jpg" alt="自定义"></p>
<h2 id="通过jsDelivr引用资源"><a href="#通过jsDelivr引用资源" class="headerlink" title="通过jsDelivr引用资源"></a>通过jsDelivr引用资源</h2><p><a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D@%E7%89%88%E6%9C%AC%E5%8F%B7/%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84">https://cdn.jsdelivr.net/gh/用户名/仓库名@版本号/文件路径</a><br>如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/wwyyff123/CDN/Photos/blogs/hexo&amp;github.png</span><br></pre></td></tr></table></figure>
<p>版本号不是必须的，不加版本号将直接引用最新资源，其他详细的引用方式可以参考<br><a href="https://www.jsdelivr.com/?docs=gh">jsDelivr官方说明</a><br>github的仓库有1G的容量限制，如果满了还可以新建一个仓库。</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><div class="note info"><p>1、<a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a></p>
<p>2、<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164145286816780271598619%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=164145286816780271598619&biz_id=0">hexo史上最全搭建教程</a></p>
<p>3、<a href="https://zhuanlan.zhihu.com/p/76951130">免费CDN：jsDelivr+Github 使用方法</a></p>
</div>]]></content>
      <categories>
        <category>Hexo</category>
        <category>整理</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>整理</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习记录（四）——CSS(2)</title>
    <url>/2022/01/18/20220118%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CSS(2)/</url>
    <content><![CDATA[<h1 id="CSS进阶"><a href="#CSS进阶" class="headerlink" title="CSS进阶"></a>CSS进阶</h1><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><p>根据HTML标签的嵌套关系，选择父元素后代中满足条件的元素  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父级选择器 选择器 &#123;</span><br><span class="line">    css;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>包括父选择器后代的所有满足的选择器 </p>
<h4 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h4><p>根据HTML标签的嵌套关系，选择父元素子代中满足条件的元素  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父选择器 &gt; 子选择器 &#123;</span><br><span class="line">    css;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只包括父选择器后一级的选择器  </p>
<h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><p>同时选中多种标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器1 , 选择器2 &#123;</span><br><span class="line">    css;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h3><p>选中页面中同时满足多个选择器的标签<br>选择器1选择器2{css;}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p.box&#123;</span><br><span class="line">    css;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note danger"><ul>
<li>多个选择器直接连写  </li>
<li>如果有标签选择器，标签选择器必须在最前面</li>
</ul>
</div>
<h3 id="hover伪类选择器"><a href="#hover伪类选择器" class="headerlink" title="hover伪类选择器"></a>hover伪类选择器</h3><p>选中鼠标悬停在元素上的状态，设置样式  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器:hover&#123;</span><br><span class="line">    css;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note danger"><p>任何标签都可以添加伪类选择器  </p>
</div>

<h3 id="Emmet语法"><a href="#Emmet语法" class="headerlink" title="Emmet语法"></a>Emmet语法</h3><h2 id="背景相关属性"><a href="#背景相关属性" class="headerlink" title="背景相关属性"></a>背景相关属性</h2><h3 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3><p>background-color(bgc)  </p>
<div class="note info"><ul>
<li>背景颜色默认是透明：rgba(0,0,0,0),transparnt  </li>
<li>背景颜色不会影响盒子大小，一般在布局里先给盒子设置背景色</li>
</ul>
</div>

<h3 id="背景图"><a href="#背景图" class="headerlink" title="背景图"></a>背景图</h3><p>background-image(bgi)</p>
<div class="note info"><ul>
<li>url可以省略引号</li>
<li>默认水平和垂直平铺</li>
<li>无法撑开盒子</li>
</ul>
</div>

<h4 id="背景图平铺"><a href="#背景图平铺" class="headerlink" title="背景图平铺"></a>背景图平铺</h4><p>background-repeat(bgr)</p>
<div class="note info"><ul>
<li>repeat：默认平铺</li>
<li>no-repeat：不平铺</li>
<li>repeat-x：水平平铺</li>
<li>repeat-y：垂直平铺</li>
</ul>
</div>

<h4 id="背景图位置"><a href="#背景图位置" class="headerlink" title="背景图位置"></a>背景图位置</h4><p>background-position(bgp):水平方向位置 垂直方向位置;  </p>
<div class="note info"><ul>
<li>background-position:left/center/right top/center/bottom;</li>
<li>background-position:XXpx XXpx;（整数往右往下，负数往左往上）</li>
</ul>
</div>

<h3 id="背景属性连写"><a href="#背景属性连写" class="headerlink" title="背景属性连写"></a>背景属性连写</h3><p>background（bg）: color URL(image) repeat position（不区分顺序）</p>
<div class="note info"><ul>
<li>可以按照需求省略</li>
<li>PC端，如果盒子大小和背景图大小一样，可以直接写background: url()</li>
</ul>
</div>

<h3 id="img标签和背景图的区别"><a href="#img标签和背景图的区别" class="headerlink" title="img标签和背景图的区别"></a>img标签和背景图的区别</h3><div class="note info"><ul>
<li>直接写img标签，默认以原尺寸显示（重要的图片）</li>
<li>div+background-image属性，需要设置div尺寸（装饰性图片）</li>
</ul>
</div>

<h2 id="元素显示模式"><a href="#元素显示模式" class="headerlink" title="元素显示模式"></a>元素显示模式</h2><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><div class="note info"><ul>
<li>独占一行</li>
<li>宽度默认是父级元素的宽度，高度由内容撑开</li>
<li>可以设置宽高</li>
</ul>
</div>
<p>如：div、p、h、ul、li、dl、dt、dd、form、header、nav、footer…</p>
<h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><div class="note info"><ul>
<li>一行显示多个</li>
<li>宽度和高度默认由高度撑开</li>
<li>不可以设置宽高</li>
</ul>
</div>
<p>如：a、span、b、u、i、s、strong、ins、em、del…</p>
<h3 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h3><div class="note info"><ul>
<li>一行显示多个</li>
<li>可以设置宽高</li>
</ul>
</div>
<p>如：input、textarea、button、select…  </p>
<div class="note danger"><p>注意：img标签有行内块元素特点，但是浏览器显示是inline</p>
</div>
<h3 id="元素显示模式转换"><a href="#元素显示模式转换" class="headerlink" title="元素显示模式转换"></a>元素显示模式转换</h3><p>改变元素默认的现实特点</p>
<div class="note info"><ul>
<li>display:block——转换成块级元素</li>
<li>display:inline-block——转换成行内块元素</li>
<li>diskplay:inline——转换成行内元素</li>
</ul>
</div>

<h3 id="标签嵌套"><a href="#标签嵌套" class="headerlink" title="标签嵌套"></a>标签嵌套</h3><div class="note info"><ul>
<li>块级元素一般作为大容器嵌套文本、块级元素、行内元素、行内块元素<ul>
<li>但是p标签不能嵌套div、p、h等块级元素</li>
</ul>
</li>
<li>a标签可以嵌套任意元素<ul>
<li>但是a标签不能嵌套a标签</li>
</ul>
</li>
</ul>
</div>

<h2 id="CSS特性"><a href="#CSS特性" class="headerlink" title="CSS特性"></a>CSS特性</h2><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><div class="note info"><ul>
<li>子元素默认继承父元素样式（文字控制属性）color、font相关样式、text相关样式、ling-height、文字控制属性  </li>
<li>可以通过调试工具判断<br>特殊情况：</li>
<li>a标签无法继承（浏览器默认样式）</li>
<li>h标签的font-size无法继承</li>
</ul>
</div>
<h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><div class="note info"><ul>
<li>同一标签的不同样式–层层叠加–共同作用在标签上</li>
<li>同一标签的相同样式–层层覆盖–最后的样式生效</li>
<li>当样式冲突时，只有当选择器优先级相同时，层叠性才生效</li>
</ul>
</div>]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习记录（四）——CSS(1)</title>
    <url>/2022/01/16/20220116%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CSS(1)/</url>
    <content><![CDATA[<h1 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h1><h2 id="CSS介绍"><a href="#CSS介绍" class="headerlink" title="CSS介绍"></a>CSS介绍</h2><div class="note default"><p>CSS：层叠样式表<br>作用：给HTML标签设置样式<br>层叠性：多行相同的属性，最后面的生效</p>
</div>
<h2 id="CSS语法规则"><a href="#CSS语法规则" class="headerlink" title="CSS语法规则"></a>CSS语法规则</h2><p>CSS写在style标签中，一般放在head标签里，title标签下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器 &#123;属性名： 属性值;&#125;</span><br><span class="line">p &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CSS引入方式"><a href="#CSS引入方式" class="headerlink" title="CSS引入方式"></a>CSS引入方式</h2><h3 id="内嵌式"><a href="#内嵌式" class="headerlink" title="内嵌式"></a>内嵌式</h3><p>CSS写在style标签中：通常约定写在head标签中，小案例使用</p>
<h3 id="外链式"><a href="#外链式" class="headerlink" title="外链式"></a>外链式</h3><p>CSS单独写在.css文件中，需要通过link标签在网页中引入，项目中常用</p>
<h3 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h3><p>CSS写在标签的style属性中，常配合js使用</p>
<h2 id="CSS基础选择器"><a href="#CSS基础选择器" class="headerlink" title="CSS基础选择器"></a>CSS基础选择器</h2><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><p>标签名{css属性名:属性值;}<br>通过标签名，找到页面中所有这类标签设置样式  </p>
<div class="note danger"><ol>
<li>标签选择器选择的是一类标签，而不是一个</li>
<li>标签选择器不管嵌套关系多深，都可以找到对应标签</li>
</ol>
</div>

<h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p>.类名{css属性名:属性值;}<br>通过类名，找到页面中所有这类标签设置样式  </p>
<div class="note danger"><ol>
<li>通过标签的class属性定义</li>
<li>类名由数字、字母、下划线、中划线组成，但不能以数字或中划线开头</li>
<li>可以同时有多个类名，空格隔开</li>
<li>类名可以重复</li>
</ol>
</div>

<h3 id="id选择器（一般不用）"><a href="#id选择器（一般不用）" class="headerlink" title="id选择器（一般不用）"></a>id选择器（一般不用）</h3><p>#id属性值{css属性名:属性值;}<br>通过id属性值，找到页面中所有这类标签设置样式  </p>
<div class="note danger"><ol>
<li>所有标签都有id属性</li>
<li>id属性在一个页面中是唯一的</li>
<li>一个标签只能有一个id属性值</li>
<li>一个id选择器只能选中一个标签</li>
</ol>
</div>

<h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><p>*{css属性名:属性值；}<br>找到页面中所有标签，设置样式</p>
<div class="note danger"><ol>
<li>开发中使用较少</li>
<li>局部设置相关样式（如margin和padding边距）</li>
</ol>
</div>

<h2 id="字体和文本样式"><a href="#字体和文本样式" class="headerlink" title="字体和文本样式"></a>字体和文本样式</h2><h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><h4 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h4><p>font-size：数字+px<br>默认大小是16px</p>
<h4 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h4><p>font-weight:<br>关键字  </p>
<ul>
<li>normal：正常</li>
<li>bold：加粗<br>数字  </li>
<li>400：正常</li>
<li>700：加粗<div class="note danger"><ul>
<li>并不是所有字体都提供了九种粗细</li>
<li>关键字设置使用最多</li>
</ul>
</div>
<h4 id="字体样式-1"><a href="#字体样式-1" class="headerlink" title="字体样式"></a>字体样式</h4>font-style:文字倾斜</li>
<li>normal：正常</li>
<li>italic：倾斜<h4 id="字体类型"><a href="#字体类型" class="headerlink" title="字体类型"></a>字体类型</h4>font-family:设置字体（默认字体是雅黑）</li>
<li>具体字体：”Microsoft YaHei”,微软雅黑，宋体，黑体，宋体，楷体…</li>
<li>字体系列：sans-serif(无衬线）、serif（衬线）、monospace（等宽）等…<h4 id="复合属性"><a href="#复合属性" class="headerlink" title="复合属性"></a>复合属性</h4>font属性连写<br>font:style weight size/line-height family;  <div class="note danger"><ul>
<li>style和weight可省略</li>
<li>注意字体大小和行高的覆盖问题</li>
</ul>
</div></li>
</ul>
<h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><h4 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h4><p>text-indent：</p>
<ul>
<li>数字+px</li>
<li>数字+em（1em指当前标签font-size大小）：如2em缩进2个字符<h4 id="内容水平对齐方式"><a href="#内容水平对齐方式" class="headerlink" title="内容水平对齐方式"></a>内容水平对齐方式</h4>text-align：</li>
<li>left：左对齐</li>
<li>center：居中对齐</li>
<li>right：右对齐  <div class="note danger"><p>text-align:center能让以下元素居中：需要给父元素设置</p>
<ol>
<li>文本</li>
<li>span标签，a标签</li>
<li>input标签，img标签</li>
</ol>
</div></li>
</ul>
<h4 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h4><p>text-decoration</p>
<ul>
<li>underline：下划线</li>
<li>line-through：删除线</li>
<li>overline：上划线</li>
<li>none：无装饰线（可删除a标签下划线）</li>
</ul>
<h4 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h4><p>line-height：上间距+文本高度+下间距  </p>
<ul>
<li>数字+px</li>
<li>倍数（当前标签font-size的倍数）<div class="note danger"><ol>
<li>让单行文本垂直居中可设置line-height：文字父元素高度</li>
<li>line-height:1  取消上下间距</li>
</ol>
</div></li>
</ul>
<h3 id="标签居中"><a href="#标签居中" class="headerlink" title="标签居中"></a>标签居中</h3><p>使div、p、h（大盒子）水平居中<br>margin:0 auto; 水平居中（左右边距为剩余边距均分）</p>
<div class="note danger"><ul>
<li>直接给当前元素本身设置</li>
<li>如果盒子没有设置宽度，默认占满父元素宽度</li>
</ul>
</div>

<h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><p>父元素加入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">display: flex;</span><br><span class="line">align-items: center;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习记录（三）——Html基础3</title>
    <url>/2022/01/13/20220113%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-Html%E5%9F%BA%E7%A1%803/</url>
    <content><![CDATA[<h1 id="Html标签（二）"><a href="#Html标签（二）" class="headerlink" title="Html标签（二）"></a>Html标签（二）</h1><h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><p>table：表格整体，包裹多个tr<br>tr：表格行，包裹td<br>td：单元格，包裹内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;##&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;##&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;##&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br></pre></td></tr></table></figure>
<h3 id="表格属性（实际开发用CSS设置）"><a href="#表格属性（实际开发用CSS设置）" class="headerlink" title="表格属性（实际开发用CSS设置）"></a>表格属性（实际开发用CSS设置）</h3><ul>
<li>border:边框宽度</li>
<li>width:表格宽度</li>
<li>height：表格高度</li>
</ul>
<h3 id="表格标题和表头单元格标签"><a href="#表格标题和表头单元格标签" class="headerlink" title="表格标题和表头单元格标签"></a>表格标题和表头单元格标签</h3><ul>
<li>caption：表格大标题，顶部居中显示，放在table标签内</li>
<li>th：表头单元格，一般为表格单元格</li>
</ul>
<h3 id="表格的结构标签"><a href="#表格的结构标签" class="headerlink" title="表格的结构标签"></a>表格的结构标签</h3><ul>
<li>thead：表格头部</li>
<li>tbody：表格主体</li>
<li>tfoot：表格底部  </li>
</ul>
<div class="note danger"><p>特点：</p>
<ul>
<li>结构标签内包裹tr标签</li>
<li>结构标签可以省略</li>
</ul>
</div>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table border=&quot;1&quot;&gt;</span><br><span class="line">    &lt;caption&gt;&lt;strong&gt;标题&lt;/strong&gt;&lt;/caption&gt;</span><br><span class="line">    &lt;!-- thead表格头部 --&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;##&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;!-- 表格主体 --&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;##&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;##&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">     &lt;/tbody&gt;</span><br><span class="line">     &lt;!-- 表格底部 --&gt;</span><br><span class="line">     &lt;tfoot&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;##&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">     &lt;/tfoot&gt;    </span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<h3 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h3><p>竖向合并：rowspan，属性值表示合并个数<br>横向合并：colspan，属性值表示合并个数<br>步骤：</p>
<ol>
<li>合并哪几个单元格</li>
<li>左上原则，确定保留和删除部分</li>
<li>给保留的单元格设置rowspan或者colspan  </li>
</ol>
<div class="note danger"><p>特点：只能在同一个表格结构合并，不能跨结构</p>
</div>

<h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><p>使用场景：登陆/注册/搜索时使用</p>
<h3 id="input系列"><a href="#input系列" class="headerlink" title="input系列"></a>input系列</h3><p>显示收集用户信息的表单效果  </p>
<div class="note info"><p>type类型：</p>
<ul>
<li>text：文本框，单行文本</li>
<li>password：密码框</li>
<li>radio：单选框<ul>
<li>name：相同属性值为一组，只能选一个</li>
<li>cheked：默认选中</li>
</ul>
</li>
<li>checkbox：多选框</li>
<li>file：文件上传<ul>
<li>multiple：多文件选择</li>
</ul>
</li>
<li>submit：提交按钮<ul>
<li>必须要表单域标签form</li>
</ul>
</li>
<li>reset：重置按钮<ul>
<li>必须要表单域标签form</li>
</ul>
</li>
<li>button：普通按钮，配合js添加功能<ul>
<li>可作为<button></button>双标签</li>
</ul>
</li>
</ul>
</div>  
<p>属性placeholder：占位符，提示内容<br>属性cheked：默认选中</p>
<h3 id="select下拉菜单"><a href="#select下拉菜单" class="headerlink" title="select下拉菜单"></a>select下拉菜单</h3><p>提供多个选项的下拉菜单  </p>
<ul>
<li>select:下拉整体  </li>
<li>option：下拉菜单的每一项<ul>
<li>selected：默认选中</li>
</ul>
</li>
</ul>
<h3 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a>文本域</h3><p>标签名：textarea<br>属性</p>
<ul>
<li>cols：文本域可见宽度</li>
<li>rows：文本域可见行数</li>
</ul>
<h3 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h3><p>常用语绑定内容与表单标签的关系</p>
<div class="note default"><ul>
<li>使用方法①<ol>
<li>使用label标签把内容（如文本）包裹</li>
<li>在表单标签添加id属性</li>
<li>在label标签的for属性中设置对应的id属性</li>
</ol>
</li>
</ul>
</div>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;nan&quot;&gt;&lt;label for=&quot;nan&quot;&gt;男&lt;/label&gt;</span><br></pre></td></tr></table></figure>
<div class="note default"><ul>
<li>使用方法②<ol>
<li>直接用label把内容和表单标签一起包裹</li>
<li>把label的for属性删除</li>
</ol>
</li>
</ul>
</div>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;&quot;&gt;女&lt;/label&gt;</span><br></pre></td></tr></table></figure>

<h2 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h2><h3 id="无语义的布局标签"><a href="#无语义的布局标签" class="headerlink" title="无语义的布局标签"></a>无语义的布局标签</h3><p>布局网页使用&lt;div&gt;和&lt;span&gt;</p>
<ul>
<li>div：一行只显示一个</li>
<li>span：一行显示多个  </li>
</ul>
<h3 id="有语义的布局标签"><a href="#有语义的布局标签" class="headerlink" title="有语义的布局标签"></a>有语义的布局标签</h3><p>HTML5中提供开发者使用，手机网页使用较多</p>
<div class="note info"><ul>
<li>header：网页头部</li>
<li>nav：网页导航</li>
<li>footer:网页底部</li>
<li>aside:网页侧边栏</li>
<li>section：网页区块</li>
<li>article：网页文章  </li>
</ul>
</div>
<p><img src="https://cdn.jsdelivr.net/gh/wwyyff123/CDN/Photos/%E5%89%8D%E7%AB%AF/HTML%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE.jpg" alt="有语义标签"></p>
<h2 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h2><ul>
<li>HTML中的空格：&amp;nbsp;<br><img src="https://cdn.jsdelivr.net/gh/wwyyff123/CDN/Photos/%E5%89%8D%E7%AB%AF/%E5%AD%97%E7%AC%A6%E5%AE%9E%E4%BD%93.jpg" alt="字符实体"></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>Html</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习记录（二）——Html基础2</title>
    <url>/2022/01/12/20220112%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-Html%E5%9F%BA%E7%A1%802/</url>
    <content><![CDATA[<h1 id="Html标签（二）"><a href="#Html标签（二）" class="headerlink" title="Html标签（二）"></a>Html标签（二）</h1><hr>
<h2 id="Html音频标签"><a href="#Html音频标签" class="headerlink" title="Html音频标签"></a>Html音频标签</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;audio src=&quot; &quot;&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure>
<p>目前支持mp3,wav,ogg</p>
<div class="note danger"><p>常见属性：  </p>
<ul>
<li>src：路径  </li>
<li>controls：显示控件  </li>
<li>autoplay：自动播放(部分浏览器不支持)</li>
<li>loop：循环播放</li>
</ul>
</div>

<h2 id="Html视频标签"><a href="#Html视频标签" class="headerlink" title="Html视频标签"></a>Html视频标签</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;video src=&quot; &quot;&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure>
<p>目前支持mp4，webM，ogg</p>
<div class="note danger"><p>常见属性：  </p>
<ul>
<li>src：路径  </li>
<li>controls：显示控件  </li>
<li>autoplay：自动播放(Chrome需配合muted实现静音播放)</li>
<li>loop：循环播放</li>
</ul>
</div>

<h2 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h2><p>a标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&quot; target=&quot; &quot;&gt;标签文字&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<div class="note danger"><p>href：跳转地址<br>#：表示空链接<br>target属性：控制网页的打开形式  </p>
<ul>
<li>_self：当前窗口  </li>
<li>_blank：新窗口</li>
</ul>
</div>

<h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>ul：无序列表的整体，用于包裹li标签<br>li：无序列表的每一项，包含每一行的内容<br>显示特点：列表每一项前默认显示圆点标识</p>
<div class="note danger"><p>注意点：  </p>
<ul>
<li>ul标签只允许包含li标签</li>
<li>li标签可以包含任意内容</li>
</ul>
</div>

<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>ol：有序列表的整体，包括li标签<br>li：无序列表的每一项，包含每一行的内容<br>显示特点：列表每一项前默认显示序号</p>
<div class="note danger"><p>注意点：  </p>
<ul>
<li>ol标签只允许包含li标签</li>
<li>li标签可以包含任意内容</li>
</ul>
</div>

<h3 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h3><p>dl:自定义列表的整体，包裹dt/dd标签<br>dt：自定义列表的主题<br>dd：自定义列表针对主题的每一项内容<br>显示特点：dd前默认显示缩进</p>
<div class="note danger"><p>注意点：</p>
<ul>
<li>dl标签只允许包含dt/dd标签</li>
<li>dt/dd标签可以包含任意内容</li>
</ul>
</div>
]]></content>
      <categories>
        <category>前端</category>
        <category>Html</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习记录（一）——Html基础1</title>
    <url>/2022/01/11/20220111%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-Html%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="html的骨架结构"><a href="#html的骨架结构" class="headerlink" title="html的骨架结构"></a>html的骨架结构</h1><p>整体、头部、标题、主体</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;  //网页的整体</span><br><span class="line">    &lt;head&gt;  //网页的头部</span><br><span class="line">        &lt;title&gt;标题&lt;/title&gt; //网页的标题</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;  //网页的身体</span><br><span class="line">        网页主体内容</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h1 id="html的语法规范"><a href="#html的语法规范" class="headerlink" title="html的语法规范"></a>html的语法规范</h1><h2 id="html的注释"><a href="#html的注释" class="headerlink" title="html的注释"></a>html的注释</h2><p>vsc中按ctrl+/，整行变注释，再按一次取消</p>
<h2 id="标签的关系"><a href="#标签的关系" class="headerlink" title="标签的关系"></a>标签的关系</h2><ul>
<li>父子关系（嵌套关系）:如html和body的关系</li>
<li>兄弟关系（并列关系）:如head和body的关系</li>
</ul>
<h1 id="html标签"><a href="#html标签" class="headerlink" title="html标签"></a>html标签</h1><h2 id="排版标签"><a href="#排版标签" class="headerlink" title="排版标签"></a>排版标签</h2><h3 id="标题标签（双标签）"><a href="#标题标签（双标签）" class="headerlink" title="标题标签（双标签）"></a>标题标签（双标签）</h3><h4 id="lt-h-gt-系列标签："><a href="#lt-h-gt-系列标签：" class="headerlink" title="&lt;h&gt;系列标签："></a>&lt;h&gt;系列标签：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;一级标题&lt;/h1&gt;  </span><br><span class="line">&lt;h2&gt;二级标题&lt;/h2&gt;</span><br><span class="line">...  </span><br><span class="line">&lt;h6&gt;六级标题&lt;/h6&gt;  </span><br></pre></td></tr></table></figure>
<div class="note info"><ul>
<li>光标在末尾直接ctrl+c/v粘贴  </li>
<li>选中数字按ctrl+d自动往后选择同数字  </li>
</ul>
</div> 
<div class="note danger"><p>特点：  </p>
<ul>
<li>标题文字都会加粗  </li>
<li>字体大小逐级变小  </li>
<li>独占一行  </li>
</ul>
</div> 

<h3 id="段落标签（双标签）"><a href="#段落标签（双标签）" class="headerlink" title="段落标签（双标签）"></a>段落标签（双标签）</h3><div class="note default"><p>用于分段显示</p>
</div> 
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;我是一段文字&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<div class="note danger"><p>特点：<br>    - 独占一行<br>    - 两行之间有空隙</p>
</div>  

<h3 id="换行标签（单标签）"><a href="#换行标签（单标签）" class="headerlink" title="换行标签（单标签）"></a>换行标签（单标签）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;br&gt;强制换行</span><br></pre></td></tr></table></figure>

<h3 id="水平线标签（单标签）"><a href="#水平线标签（单标签）" class="headerlink" title="水平线标签（单标签）"></a>水平线标签（单标签）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;hr&gt;水平线</span><br></pre></td></tr></table></figure>

<h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><div class="note default"><p>让文字加粗、下划线、倾斜、删除线等效果</p>
</div> 
<ul>
<li><p>自然样式标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;b&gt;加粗&lt;/b&gt;  </span><br><span class="line">&lt;u&gt;下划线&lt;/u&gt;  </span><br><span class="line">&lt;i&gt;倾斜&lt;/i&gt;  </span><br><span class="line">&lt;s&gt;删除线&lt;/s&gt;  </span><br></pre></td></tr></table></figure>
<p><b>加粗</b><br><u>下划线</u><br><i>倾斜</i><br><s>删除线</s>  </p>
</li>
<li><p>语义样式标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;strong&gt;加粗&lt;/strong&gt;  </span><br><span class="line">&lt;ins&gt;下划线&lt;/ins&gt;  </span><br><span class="line">&lt;em&gt;倾斜&lt;/em&gt;  </span><br><span class="line">&lt;del&gt;删除线&lt;/del&gt; </span><br></pre></td></tr></table></figure>
<p><strong>加粗</strong><br><ins>下划线</ins><br><em>倾斜</em><br><del>删除线</del>   </p>
<div class="note danger"><p>语义：  </p>
<ul>
<li>突出重要性的强调语境：对人来说好理解<br>比如&lt;b&gt;只是单纯的加粗，而&lt;strong&gt;起到的是强调的效果，前者注重形式，后者注重内容，在盲人场景，strong标签会重读  </li>
<li>对机器来说有利于机器解析：在seo（搜索引擎优化）中，后者更容易被搜索引擎关注，对搜索排名有积极作用</li>
</ul>
</div>  </li>
</ul>
<h3 id="媒体标签"><a href="#媒体标签" class="headerlink" title="媒体标签"></a>媒体标签</h3><h4 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src= &quot; &quot; alt=&quot; &quot;&gt;</span><br></pre></td></tr></table></figure>
<div class="note danger"><p>特点：  </p>
<ul>
<li>单标签</li>
<li>img标签需要展示对应的效果，需要借助标签的属性进行设置（如src/alt属性名，” “属性值）<br>属性  </li>
<li>src是内容源  </li>
<li>alt是替换文本  </li>
<li>title是提示文本,鼠标悬停时提醒</li>
<li>width和height控制宽度高度（只设置一个会等比例缩放）  </li>
</ul>
</div> 
<h4 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h4><p>绝对路径：目录下的绝对位置，通常从盘符开始，或完整的url地址<br>相对路径：从当前文件出发找目标的过程  </p>
<ul>
<li>同级目录：”目标对象.xxx”或者”./目标对象.xxx”  </li>
<li>下级目录：”./文件夹名/目标对象.xxx”  </li>
<li>上级目录：”../上一级目录/文件夹名/目标对象.xxx”(斜杠前一个点指当前目录，多一个点往上多走一级)</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>Html</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Github 建站整理（一）：搭建与部署</title>
    <url>/2022/01/11/20220111Hexo+GithubP1/</url>
    <content><![CDATA[<blockquote><p>本文内容并非原创，部分内容来源于官方文档和网络，可以理解为建站之后的个人总结和整理，便于自己以后查阅。</p>
</blockquote>

<p><img src="https://cdn.jsdelivr.net/gh/wwyyff123/CDN/Photos/blogs/hexo&github.png" alt="Hexo$Github"></p>
<h1 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h1><div class="note info"><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
</div>

<h1 id="Hexo的搭建与部署"><a href="#Hexo的搭建与部署" class="headerlink" title="Hexo的搭建与部署"></a>Hexo的搭建与部署</h1><div class="note default"><p>此部分为Hexo的搭建、如何部署到Github以及个人域名的绑定</p>
</div>

<h2 id="获得域名（可跳过）"><a href="#获得域名（可跳过）" class="headerlink" title="获得域名（可跳过）"></a>获得域名（可跳过）</h2><p>申请个人域名可以让自己的博客更加个性化，常见的域名有com,cn,net…等等，申请域名的地方有很多，比如 <a href="https://wanwang.aliyun.com/domain/">阿里云</a>和<a href="https://buy.cloud.tencent.com/domain">腾讯云</a>，我这里使用的是腾讯云，具体步骤参考具体域名购买网址就可以了。这里是整个搭建过程里唯一需要氪金的地方，当然也可以不购买域名，直接使用github的域名就可以了。  </p>
<h2 id="Github创建仓库"><a href="#Github创建仓库" class="headerlink" title="Github创建仓库"></a>Github创建仓库</h2><p>首先登陆Github账号，点击New repository创建新仓库，仓库名应该为: 用户名/github.io，这个是固定写法，用户名必须与Github的账号名一致。<br><img src="https://cdn.jsdelivr.net/gh/wwyyff123/CDN/Photos/blogs/1%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93.jpg" alt="创建仓库"></p>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><div class="note default"><p>Git是目前世界上最先进的分布式版本控制系统。</p>
</div>
<p>点击<a href="https://git-scm.com/download/win">Git</a>选择对应版本下载，一路下一步安装即可。安装好后终端输入</p>
   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git --version //检测git是否安装成功</span><br></pre></td></tr></table></figure>
<p>   如果能查看到版本说明安装成功。<br>   <img src="https://cdn.jsdelivr.net/gh/wwyyff123/CDN/Photos/blogs/2git%E7%89%88%E6%9C%AC.jpg" alt="Git版本"></p>
<p>安装后绑定Github账号，打开终端输入:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>生成ssh密钥：</p>
   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>   直接回车3次，然后找到生成的.ssh文件夹中id_rsa.pub密钥，将里面的内容全部复制<br>   <img src="https://cdn.jsdelivr.net/gh/wwyyff123/CDN/Photos/blogs/3ssh%E5%AF%86%E9%92%A5.jpg" alt="ssh密钥"></p>
<p>   打开<a href="https://link.zhihu.com/?target=https://github.com/settings/keys">GitHub_Settings_keys</a>页面，点击New SSH key，Title随便写，Key填入之前复制的内容，最后点击Add SSH key<br>   <img src="https://cdn.jsdelivr.net/gh/wwyyff123/CDN/Photos/blogs/4newsshkey.jpg" alt="sshkey"></p>
<p>   最后在终端中输入</p>
   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure>
<p>   显示successfully说明成功了<br>   <img src="https://cdn.jsdelivr.net/gh/wwyyff123/CDN/Photos/blogs/5%E6%A3%80%E9%AA%8Cssh.jpg" alt="sshkey"></p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>Hexo是基于Node.js编写的，所以需要在<a href="https://nodejs.org/zh-cn/download/">Download | Node.js</a>下载安装，一直下一步即可，Node.js会包含环境变量和npm的安装，安装后终端输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v //检测Node.js是否安装成功</span><br><span class="line">npm -v //检测npm是否安装成功</span><br></pre></td></tr></table></figure>

<p>显示了版本号说明安装成功了</p>
<p><img src="https://cdn.jsdelivr.net/gh/wwyyff123/CDN/Photos/blogs/6%E6%A3%80%E6%9F%A5node.jpg" alt="检查安装"></p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>在电脑上创建blog的文件夹，可以放在onedrive的文件夹里方便同步，然后文件夹里按住shift右键空白点击在此处打开pwershell，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli  //安装hexo</span><br></pre></td></tr></table></figure>

<p>命令完成后依次输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init myblog  //初始化</span><br><span class="line">cd myblog  //进入myblog文件夹</span><br><span class="line">npm install </span><br></pre></td></tr></table></figure>

<p>完成后，myblog里应该会有以下文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<p>然后输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g  //生成页面</span><br><span class="line">hexo s  //启动服务预览</span><br></pre></td></tr></table></figure>
<p>随后浏览器输入localhost:4000就可以看到了<br><img src="https://cdn.jsdelivr.net/gh/wwyyff123/CDN/Photos/blogs/7%E8%B5%B7%E5%A7%8B%E9%A1%B5%E9%9D%A2.jpg" alt="起始页面"></p>
<div class="note danger"><p>如果无法打开localhost:4000，参考以下：<br>1、4000端口被其他程序占用：上一步里输入hexo s -p 5000将端口号改为5000，然后浏览器输入localhost:5000<br>2、IIS服务未启用：控制面板-启用或关闭Windows功能，勾选internet information services确定就行了</p>
</div>

<h2 id="将Hexo部署到Github"><a href="#将Hexo部署到Github" class="headerlink" title="将Hexo部署到Github"></a>将Hexo部署到Github</h2><p>打开博客文件夹里的_config.yml，翻到最后修改相关信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>然后安装deploy-git，在博客文件夹里打开终端，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>最后输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean  //清理</span><br><span class="line">hexo g  //生成页面</span><br><span class="line">hexo d //部署页面</span><br></pre></td></tr></table></figure>

<p>最后浏览器输入 &lt;用户名.github.io&gt;就可以访问了</p>
<h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>第一步如果购买了自己的域名，可以在此时将博客绑定。登陆腾讯云的域名管理后台，点击解析</p>
<p><img src="https://cdn.jsdelivr.net/gh/wwyyff123/CDN/Photos/blogs/8%E8%A7%A3%E6%9E%90.jpg" alt="解析"></p>
<p>添加以下解析记录</p>
<p><img src="https://cdn.jsdelivr.net/gh/wwyyff123/CDN/Photos/blogs/9%E8%A7%A3%E6%9E%902.jpg" alt="解析2"></p>
<p>其中第一条记录值的ip需要自己ping xxxx.github.io获得，第二条记录填xxxx.github.io</p>
<p>登陆Github，进入之前创建的仓库，点击setting-pages，在custom domain处输入要绑定的域名，点击save保存</p>
<p><img src="https://cdn.jsdelivr.net/gh/wwyyff123/CDN/Photos/blogs/10%E7%BB%91%E5%AE%9A.jpg" alt="绑定"></p>
<p>进入博客文件夹/source目录下，创建记事本文件，输入自己的域名，然后保存命名为CNAME（不带后缀名）</p>
<p>最后在博客文件夹目录里打开终端，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>就可以通过购买的域名访问了。</p>
<p>到这里，博客的搭建基本完成。</p>
<h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>在博客文件夹目录打开终端输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;文章名&quot;</span><br></pre></td></tr></table></figure>

<p>然后在博客文件夹/source/_post下可以看到生成的markdown文件，打开就可以编辑了，写完后再输入以下代码就发布成功了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>关于markdown语法，可以参考<a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown 教程 | 菜鸟教程 (runoob.com)</a>，编写工具可以用Typora或者visual studio code</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><div class="note info"><p>1、<a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a></p>
<p>2、<a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程 - 知乎 (zhihu.com)</a></p>
</div>]]></content>
      <categories>
        <category>Hexo</category>
        <category>整理</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>整理</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-01-10 记录</title>
    <url>/2022/01/10/20220110/</url>
    <content><![CDATA[<h1 id="Hexo-Next"><a href="#Hexo-Next" class="headerlink" title="Hexo+Next"></a>Hexo+Next</h1><div class="note info"><p>blog基本功能都有了，下一步再研究一下细节上的东西。<br>打算抽空把从开始建博客到现在的思路和碰到的坑整理一下。</p>
</div>
<ul>
<li>增加了基于valine的评论系统</li>
<li>增加了基于chatra的聊天系统  </li>
</ul>
<h1 id="前端学习"><a href="#前端学习" class="headerlink" title="前端学习"></a>前端学习</h1><div class="note danger"><p>在建blog的过程中感受到了码农了乐趣，与后端相比，前端的语言更为简单和易学，基本上扫一眼就能看懂，打算抽时间把前端系统的学习一遍。  </p>
</div>  
<h2 id="Day1记录"><a href="#Day1记录" class="headerlink" title="Day1记录"></a>Day1记录</h2><p>  前端三大基本工具：html+Css+Javascipt  </p>
<ul>
<li>html———-结构  </li>
<li>Css———–表现  </li>
<li>Javascript—-交互  </li>
</ul>
]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-01-07 记录</title>
    <url>/2022/01/07/20220107/</url>
    <content><![CDATA[<h1 id="Hexo-Next"><a href="#Hexo-Next" class="headerlink" title="Hexo+Next"></a>Hexo+Next</h1><div class="note info"><ul>
<li>修改blog主题，增加相关功能  </li>
</ul>
</div>  
<h1 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h1><div class="note warning"><ul>
<li>阅读完《图说区块链》第一章<ul>
<li>(1) 比特币/区块链诞生的根本原因是为了解决信任问题</li>
<li>(2) 区块链分布式账本的特点：<ul>
<li>无限增加的巨型账本</li>
<li>加密且有顺序（哈希算法和时间戳）</li>
<li>去中心化</li>
<li>分布式且不可篡改</li>
<li>公开和透明</li>
</ul>
</li>
<li>(3) 目前的价值转移不是直接传输，而是需要中心化的第三方来背书</li>
<li>(4) 区块链可以构建一种纯粹的点对点的价值转移体系</li>
<li>(5) 区块链技术带来的是智能化信任</li>
<li>(6) 区块链实际上是用基于共识的算法，在机器之间建立信任并完成信用创造，最核心的问题就是解决信用共识问题</li>
<li>(7) 比特币的几个基本原则：<ul>
<li>纯粹的点对点的电子现金系统</li>
<li>不需要第三方支付就能防止双重支付</li>
<li>对全部交易加上时间戳，并并入一个不断延展的基于哈希算法的工作量证明（pow共识机制）的链条作为交易记录，且不可篡改</li>
<li>最长链原则</li>
<li>需要的基础设施非常少，节点尽最大努力在全网传播信息即可，节点可以随时离开和重新加入网络，并将最长的工作量证明作为该节点离线期间发生的交易的证明  </li>
</ul>
</li>
</ul>
</li>
</ul>
</div> 
]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>建筑师与产品经理</title>
    <url>/2022/01/06/20220106%E5%BB%BA%E7%AD%91%E5%B8%88%E4%B8%8E%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/</url>
    <content><![CDATA[<h1 id="建筑师与产品经理"><a href="#建筑师与产品经理" class="headerlink" title="建筑师与产品经理"></a>建筑师与产品经理</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>  2022年1月1日，建筑行业步入了过去十年最艰难的一年，同时也是未来十年最简单的一年。作为工作了三年的入门建筑师（也可能门也没入），在大环境愈发萧条的现实之下不得不对自己和行业进行一些思考。在这个背景下，我阅读了《人人都是产品经理》，查阅了大量有关产品经理的文章，发现建筑和产品经理是有许多共通之处的，建筑设计的过程的许多理念是可以引申到做产品的过程中去，同时产品经理的产品思维也是值得建筑师去学习的。</p>
<h2 id="2-建筑是什么"><a href="#2-建筑是什么" class="headerlink" title="2. 建筑是什么"></a>2. 建筑是什么</h2><p>  建筑是容纳人类活动的构造物，也是人类活动发生的场所。</p>
<span id="more"></span>

<p>建筑学研究的不仅仅是建筑物本身，更是研究人们对建筑物的要求以及需求如何得以满足。古罗马建筑家维特鲁威的《建筑十书》里写到，建筑的三要素为：坚固、实用、美观，这三要素到今天为止仍然是建筑师们遵循的基本准则。</p>
<h2 id="3-建筑师是什么"><a href="#3-建筑师是什么" class="headerlink" title="3. 建筑师是什么"></a>3. 建筑师是什么</h2><p>  建筑师通过与工程投资方和施工方的合作，在技术、经济、功能和造型上实现建筑物的营造。如同字面意思，建筑师是建筑的设计者，是对空间的二次构造。在建筑设计的过程中，建筑师往往扮演着统筹全局的角色，建筑师一方面对建筑整体的功能、造型和细节进行把控，另一方面对结构、水电和暖通等各专业进行总体协调，确保建筑的顺利落地。因此，建筑师对建筑本身负责，同时甲方对设计进行评价和反馈，建筑师针对需求和意见进行修改和优化，这便是建筑师的工作内容。</p>
<h2 id="4-产品是什么"><a href="#4-产品是什么" class="headerlink" title="4. 产品是什么"></a>4. 产品是什么</h2><p>  百度百科上写到：产品是指人们使用和消费，并能满足人们某种需求的任何东西，包括有形的物品、无形的服务、组织和观念或者他们的组合。从这里可以看出，产品有两个重要的元素：用户和需求。产品本质上是一种需求解决方案，它的价值是由用户去衡量的。</p>
<h2 id="5-产品经理是什么"><a href="#5-产品经理是什么" class="headerlink" title="5. 产品经理是什么"></a>5. 产品经理是什么</h2><p>  如同建筑师不仅仅只是设计建筑，产品经理也不只是设计产品，还需要对产品的需求捕获和分析，开发和落地，优化和迭代，运营和维护。从这个层面上看，建筑师和产品经理是有共通之处的。但是产品经理的职责描述分歧很多，在不同的行业、公司所承担的角色也相差很大，因此很难去定义产品经理到底是什么，但是有一点是确定的，产品经理是为用户服务的，负责产品的整个生命周期。</p>
<h2 id="6-建筑与产品的同与异"><a href="#6-建筑与产品的同与异" class="headerlink" title="6. 建筑与产品的同与异"></a>6. 建筑与产品的同与异</h2><p>  建筑是满足人们生活需求场所，从本质上看它就是一种产品，针对不同的活动场景，建筑的类型也纷繁复杂。接下来对建筑和产品进行简单的分类。</p>
<h3 id="6-1-需求的共性"><a href="#6-1-需求的共性" class="headerlink" title="6.1 需求的共性"></a>6.1 需求的共性</h3><p>建筑分类</p>
<table>
<thead>
<tr>
<th align="center"><strong>需求种类</strong></th>
<th align="center"><strong>建筑种类</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">居住</td>
<td align="center">住宅建筑</td>
</tr>
<tr>
<td align="center">消费</td>
<td align="center">商业建筑</td>
</tr>
<tr>
<td align="center">艺术</td>
<td align="center">展览建筑</td>
</tr>
<tr>
<td align="center">生产</td>
<td align="center">工业建筑</td>
</tr>
<tr>
<td align="center">…</td>
<td align="center">…</td>
</tr>
</tbody></table>
<p>产品分类</p>
<table>
<thead>
<tr>
<th align="center"><strong>需求种类</strong></th>
<th align="center"><strong>产品种类</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">交流</td>
<td align="center">社交产品</td>
</tr>
<tr>
<td align="center">消费</td>
<td align="center">购物产品</td>
</tr>
<tr>
<td align="center">娱乐</td>
<td align="center">音视频产品</td>
</tr>
<tr>
<td align="center">游戏</td>
<td align="center">游戏产品</td>
</tr>
<tr>
<td align="center">…</td>
<td align="center">…</td>
</tr>
</tbody></table>
<p>由此可以看出，需求是决定建筑 or 产品种类的因素之一，两者在本质上是共通的，建筑 or 产品的存在价值就是满足需求。</p>
<h3 id="6-2-设计过程的共性"><a href="#6-2-设计过程的共性" class="headerlink" title="6.2 设计过程的共性"></a>6.2 设计过程的共性</h3><ul>
<li>建筑的设计过程可以概括为：</li>
</ul>
<p><img src="/.io//ap.jpg" alt="建筑设计过程"></p>
<ul>
<li>产品的设计过程可以概括为：</li>
</ul>
<p><img src="/.io//pp.jpg" alt="产品设计过程"></p>
<p>  大概的说，两者都可以总结为：</p>
<p>  <strong>前期调研分析——概念设计——落地设计——后期维护</strong></p>
<ul>
<li>二者都是以某一个“对象”作为研究对象，去解决某些具体的问题的角色</li>
<li>二者都是以别人为中心，即“同理心”。</li>
<li>前期分析中，建筑的设计需要从环境和事件场景出发，提出建筑的城市定位和目标人群（在城市扮演什么角色，给人类带来了什么空间），这与产品的思考逻辑是一致的。</li>
<li>住宅/商业建筑的设计，也需要对周边环境里的竞品进行分析，找准自身的定位，打造特色亮点，才能在众多同质化的建筑中脱颖而出，产品本身也是如此。</li>
<li>建筑设计的过程里，对内经常需要和结构、水电、暖通等相关专业进行充分的沟通，对外需要和甲方、政府（旧改类项目还需要和原住民）进行沟通交流，在产品的设计过程里，产品经理也需要同技术、运营、设计沟通交流，从这个角度看，建筑和产品都不是一个角色可以完成的，而是需要充分发挥团队的力量。</li>
</ul>
<h3 id="6-3-建筑与产品的差异"><a href="#6-3-建筑与产品的差异" class="headerlink" title="6.3 建筑与产品的差异"></a>6.3 建筑与产品的差异</h3><ul>
<li><p><strong>建筑是0→1，产品是0→1→n</strong></p>
<ul>
<li><p>建筑从设计到落成后，其功能基本上已经固定，即使是进行改造和扩建，其辐射的空间范围也是有限的。</p>
</li>
<li><p>产品诞生后，通过迭代更新可以实现更多的功能，从而吸引更多的用户，其影响力和对生活方式的改变是不可估量的（如微信从基本的社交工具到现在的微信支付、微信小程序）。</p>
</li>
</ul>
</li>
<li><p><strong>建筑同质化程度相比产品较低</strong></p>
<ul>
<li>建筑因用地条件和地方规范不一样，即是是同一个地产的建筑也难以完全一致，而高度标准化的产品基本上是针对B端客户而言的（某桂园，某大等等）。</li>
<li>不同公司产品针对相同的用户，产品的主要功能可以是几乎一致的（搜索引擎，外卖平台，直播平台等等）。</li>
</ul>
</li>
<li><p><strong>建筑和产品的生命周期不同</strong></p>
<ul>
<li>建筑是有使用年限的，其生命周期是有限的，结局一般是改造、维护或拆除（纪念性建筑因其社会形象和精神支撑的作用，往往是维护）。</li>
<li>一个产品，如果不断地针对用户的需求进行更新和迭代，其生命可以是无限的。</li>
</ul>
</li>
<li><p><strong>建筑的监管和规范和产品不同</strong></p>
<ul>
<li>因为建筑本身与安全和社会问题息息相关，因此在设计的过程中涉及到的相关部门十分之多（如消防部门、规划部门、教育部门、交通部门等等），这导致了建筑更多向着政府层面倾斜。</li>
<li>产品受到的监管政策则与其本身的类型有关，因此产品更多还是以用户需求为中心的。</li>
</ul>
</li>
<li><p><strong>建筑的项目周期往往比产品长</strong></p>
<ul>
<li>一个建筑从拿地到设计到落成到用户反馈，往往需要2-5年的时间，受到的制约因素太多。</li>
<li>在底层技术和互联网环境稳定的情况下，一个产品往往几个月就可以就可以诞生。</li>
</ul>
</li>
<li><p><strong>建筑可以脱离实际功能存在</strong></p>
<ul>
<li>建筑由于其本身具有艺术上的价值体现，一栋建筑可以没有任何使用功能，它可以是精神需求的载体（如纪念性建筑），而产品是否可以脱离功能而独立存在，我认为是不成立的。</li>
</ul>
</li>
</ul>
<h2 id="7-建筑师的产品能力"><a href="#7-建筑师的产品能力" class="headerlink" title="7. 建筑师的产品能力"></a>7. 建筑师的产品能力</h2><ul>
<li>不断学习，终身学习，这是两个职业都必须具备的能力。</li>
<li>建筑也是一门讲逻辑的专业，而产品的逻辑恰恰是建筑师所需要的。</li>
<li>建筑本身就是产品，建筑师也需要培养自身的产品思维，利用产品的工具去实现建筑更合理的设计流程。</li>
<li>建筑设计同产品一样没有唯一的解决方案，都是在诸多问题里寻找更优解。针对问题第一步是“搞清楚问题，再选择方法”，而不是直接去设法解决。</li>
<li>用心听，但不要照着做，这是苏杰在《人人都是产品经理》里提到的一句话，建筑师也同样如此，要理解客户需求背后的核心理由，而不是跟随表面的要求去进行设计，这在甲方的沟通交流中尤为常见，建筑师需要去发掘甲方提出的要求的逻辑是什么，提高自身思考的能力。</li>
</ul>
]]></content>
      <categories>
        <category>建筑学</category>
        <category>心得</category>
      </categories>
      <tags>
        <tag>心得</tag>
        <tag>随手写</tag>
        <tag>建筑学</tag>
        <tag>产品经理</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-01-06 记录</title>
    <url>/2022/01/06/20220106/</url>
    <content><![CDATA[<h1 id="Hexo-Next"><a href="#Hexo-Next" class="headerlink" title="Hexo+Next"></a>Hexo+Next</h1><div class="note info"><ol>
<li>建立/daily临时目录，用于每日记录</li>
<li>学习git相关语法，了解本地库、远程库并相互关联</li>
<li>学习markdown相关语法</li>
<li>建立hexo分支，实现多终端同步工作  </li>
</ol>
</div>  ]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-05 记录</title>
    <url>/2022/01/06/20220105/</url>
    <content><![CDATA[<h1 id="Hexo-Next"><a href="#Hexo-Next" class="headerlink" title="Hexo+Next"></a>Hexo+Next</h1><div class="note info"><ul>
<li>购买域名yifanwoo.com</li>
<li>使用hexo+github建立blog，并将域名关联（初步建立并未完善）  </li>
</ul>
</div>  
<h1 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h1><div class="note warning"><ul>
<li>阅读《图说区块链》p1-p10 ：<ul>
<li>了解账本诞生的逻辑</li>
<li>账本类型：流水账——单式账本——复式账本——分布式账本</li>
<li>比特币（区块链）诞生的原因之一：信任问题  </li>
</ul>
</li>
</ul>
</div>]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
</search>
